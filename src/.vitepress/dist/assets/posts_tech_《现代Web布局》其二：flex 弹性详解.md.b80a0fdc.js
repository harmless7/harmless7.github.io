import{_ as e,c as l,o as a,d as s}from"./app.4b9a283d.js";const b=JSON.parse('{"title":"《现代Web布局》其二：flex 弹性详解","description":"","frontmatter":{"title":"《现代Web布局》其二：flex 弹性详解","icon":"css","isOriginal":true,"date":"2022-12-12T00:00:00.000Z","category":["读书笔记","前端"],"tag":["css","前端"],"image":"","banner":""},"headers":[{"level":2,"title":"参考内容","slug":"参考内容","link":"#参考内容","children":[]},{"level":2,"title":"flex 子元素在主轴上的伸缩","slug":"flex-子元素在主轴上的伸缩","link":"#flex-子元素在主轴上的伸缩","children":[{"level":3,"title":"基础概念","slug":"基础概念","link":"#基础概念","children":[]},{"level":3,"title":"flex-basis 属性","slug":"flex-basis-属性","link":"#flex-basis-属性","children":[]},{"level":3,"title":"flex-grow 属性","slug":"flex-grow-属性","link":"#flex-grow-属性","children":[]},{"level":3,"title":"flex-shrink 属性","slug":"flex-shrink-属性","link":"#flex-shrink-属性","children":[]},{"level":3,"title":"flex 属性","slug":"flex-属性","link":"#flex-属性","children":[]},{"level":3,"title":"子元素的初始尺寸，是如何计算出来的？","slug":"子元素的初始尺寸-是如何计算出来的","link":"#子元素的初始尺寸-是如何计算出来的","children":[]},{"level":3,"title":"关于 min-width: 0 的意义","slug":"关于-min-width-0-的意义","link":"#关于-min-width-0-的意义","children":[]}]}],"relativePath":"posts/tech/《现代Web布局》其二：flex 弹性详解.md","lastUpdated":1678177559000}'),o={name:"posts/tech/《现代Web布局》其二：flex 弹性详解.md"},i=s(`<p>第 4~8 节，介绍了</p><ol><li>flex 子元素的伸缩原理</li><li>flex 属性(flex-grow, flex-shrink, flex-basis)</li><li>元素初始尺寸的计算方式</li></ol><h2 id="参考内容" tabindex="-1">参考内容 <a class="header-anchor" href="#参考内容" aria-hidden="true">#</a></h2><p><a href="https://juejin.cn/book/7161370789680250917" target="_blank" rel="noreferrer">稀土掘金——现代 Web 布局</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Controlling_Ratios_of_Flex_Items_Along_the_Main_Ax" target="_blank" rel="noreferrer">MDN——控制 Flex 子元素在主轴上的比例</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-basis" target="_blank" rel="noreferrer">MDN——flex-basis</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-grow" target="_blank" rel="noreferrer">MDN——flex-grow</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-shrink" target="_blank" rel="noreferrer">MDN——flex-shrink</a></p><h2 id="flex-子元素在主轴上的伸缩" tabindex="-1">flex 子元素在主轴上的伸缩 <a class="header-anchor" href="#flex-子元素在主轴上的伸缩" aria-hidden="true">#</a></h2><p>flex 布局的精髓，就在于它能够控制子元素在主轴上的尺寸和伸缩性。（所以被称为弹性布局）</p><p>这个伸缩性使用 <code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code> 来控制。</p><p>而这三个属性，通常合写为 <code>flex</code> 属性。</p><h3 id="基础概念" tabindex="-1">基础概念 <a class="header-anchor" href="#基础概念" aria-hidden="true">#</a></h3><h4 id="正负自由空间-或可用空间-positive-and-negative-free-space" tabindex="-1">正负自由空间（或可用空间, positive and negative free space） <a class="header-anchor" href="#正负自由空间-或可用空间-positive-and-negative-free-space" aria-hidden="true">#</a></h4><p>flex 子元素的伸缩，本质上是对 flex 容器正负自由空间的分配。</p><p>自由空间的计算如图所示：</p><p><img src="https://s2.loli.net/2022/12/09/3CkRxIDefuKsyU8.jpg" alt="positive free space"></p><p>上图计算出的自由空间是正数，即 正自由空间。</p><p><img src="https://s2.loli.net/2022/12/09/4YhbTaj38yFt7oV.jpg" alt="negative free space"></p><p>以此类推，也会出现 负自由空间，计算方式也是一样的。</p><blockquote><p>注：上图漏掉了 <code>gap</code> 属性，计算自由空间时也要减去 flex 子元素之间的 <code>gap</code> 宽度。</p></blockquote><h3 id="flex-basis-属性" tabindex="-1">flex-basis 属性 <a class="header-anchor" href="#flex-basis-属性" aria-hidden="true">#</a></h3><p><code>flex-basis</code> 属性对 flexbox 中，对 Flex 子元素尺寸起 <strong>决定性</strong> 的作用。</p><p>它可以<strong>在任何空间分配之前</strong>，初始化 flex 子元素的尺寸。</p><blockquote><p><code>flex-basis</code> 比 <code>height</code> 和 <code>width</code> 具有更高的优先级。（除了值为 <code>auto</code> 时）</p></blockquote><p>它有几个需要注意的值：</p><h4 id="flex-basis-auto-默认值" tabindex="-1"><code>flex-basis: auto</code>（默认值） <a class="header-anchor" href="#flex-basis-auto-默认值" aria-hidden="true">#</a></h4><ul><li><p>如果为子元素设置了绝对值（如 <code>width: 200px</code>），那么 <code>flex-basis</code> 的值就为绝对值；</p></li><li><p>如果未设置绝对值，那么 <code>flex-basis</code> 的值为 <code>max-content</code>；</p></li></ul><h4 id="flex-basis-content" tabindex="-1"><code>flex-basis: content</code> <a class="header-anchor" href="#flex-basis-content" aria-hidden="true">#</a></h4><ul><li><p>无论有没有设置绝对值，它都以子元素内容大小为准。</p><p>（但是支持的浏览器较少，可以把 <code>height</code> 和 <code>width</code> 设为 <code>auto</code> 来达成同样的效果。）</p></li></ul><h4 id="flex-basis-0" tabindex="-1"><code>flex-basis: 0</code> <a class="header-anchor" href="#flex-basis-0" aria-hidden="true">#</a></h4><ul><li>意味着完全忽略 flex 子元素的尺寸，它的所有空间都可以被抢占。</li></ul><h3 id="flex-grow-属性" tabindex="-1">flex-grow 属性 <a class="header-anchor" href="#flex-grow-属性" aria-hidden="true">#</a></h3><p>指定了 flex <strong>增长值</strong>，决定了当 正自由空间 分配时，flex 子元素相对于它的兄弟元素的增长程度。</p><h3 id="flex-shrink-属性" tabindex="-1">flex-shrink 属性 <a class="header-anchor" href="#flex-shrink-属性" aria-hidden="true">#</a></h3><p>指定了 flex <strong>缩小值</strong>，决定了当 负自由空间 分配时，flex 子元素相对于它的兄弟元素的收缩程度。</p><p>看起来和 <code>flex-grow</code> 简直一模一样，那么为什么不把这两个属性合并起来呢？</p><p>因为 <code>flex-shrink</code> 有个特点：在缩小时 flexbox 会阻止子元素的尺寸缩小到 0，最小只到 <code>min-content</code>。</p><h3 id="flex-属性" tabindex="-1">flex 属性 <a class="header-anchor" href="#flex-属性" aria-hidden="true">#</a></h3><p><code>flex-grow</code>, <code>flex-shrink</code>, <code>flex-basis</code> 三个属性的简写。</p><p>下面来整理一下它常用的几种值：</p><h4 id="flex-initial-flex-0-1-auto-默认值" tabindex="-1"><code>flex:initial</code> (<code>flex: 0 1 auto</code>) (默认值) <a class="header-anchor" href="#flex-initial-flex-0-1-auto-默认值" aria-hidden="true">#</a></h4><p><img src="https://s2.loli.net/2022/12/09/mLeYsU48VZ9pTuk.webp" alt="flex: initial"></p><p>子元素不会成长，只会收缩。</p><h4 id="flex-auto-flex-1-1-auto" tabindex="-1"><code>flex: auto</code> (<code>flex: 1 1 auto</code>) <a class="header-anchor" href="#flex-auto-flex-1-1-auto" aria-hidden="true">#</a></h4><p><img src="https://s2.loli.net/2022/12/09/TSxHyDf6dRmZ2iA.webp" alt="flex: auto"></p><p>所有子元素均为弹性的，它们将均分正负自由空间（但不意味着均分后它们等宽）</p><h4 id="flex-1-flex-1-1-0" tabindex="-1"><code>flex: 1</code> (<code>flex: 1 1 0</code>) <a class="header-anchor" href="#flex-1-flex-1-1-0" aria-hidden="true">#</a></h4><p><img src="https://s2.loli.net/2022/12/09/9zcTv2BZKHJNp1g.webp" alt="flex: 1"></p><p>让每一个子元素变成弹性的，并且忽略自身基础尺寸，来让所有子元素等尺寸。</p><p>但是实际上上图的第一个子元素 &quot;Alonglonglongword&quot; 还是要更长一点。</p><p>需要为它设置 <code>min-width: 0</code> 才能正真均分，原因在<a href="#%E5%85%B3%E4%BA%8E-min-width-0-%E7%9A%84%E6%84%8F%E4%B9%89">文末</a>解释。</p><h4 id="flex-none-flex-0-0-auto" tabindex="-1"><code>flex: none</code> (<code>flex: 0 0 auto</code>) <a class="header-anchor" href="#flex-none-flex-0-0-auto" aria-hidden="true">#</a></h4><p><img src="https://s2.loli.net/2022/12/09/jnJHGpS6ClhY1VX.webp" alt="flex: none"></p><p>相当于消除子元素的弹性。</p><h4 id="flex-positive-number-flex-basis-positive-number" tabindex="-1"><code>flex: &lt;positive-number&gt;</code> (<code>flex-basis: &lt;positive-number&gt;</code>) <a class="header-anchor" href="#flex-positive-number-flex-basis-positive-number" aria-hidden="true">#</a></h4><p>为它设定一个带单位的绝对值，相当于在设置 <code>flex-basis</code>。</p><h3 id="子元素的初始尺寸-是如何计算出来的" tabindex="-1">子元素的初始尺寸，是如何计算出来的？ <a class="header-anchor" href="#子元素的初始尺寸-是如何计算出来的" aria-hidden="true">#</a></h3><h4 id="第一步-计算-flex-basis-的值" tabindex="-1">第一步：计算 <code>flex-basis</code> 的值 <a class="header-anchor" href="#第一步-计算-flex-basis-的值" aria-hidden="true">#</a></h4><blockquote><p>content → width → flex-basis</p></blockquote><p>含义是：</p><ol><li><p>如果 flex 子元素未指定 <code>flex-basis</code> 的值，那么去参考 <code>width</code> 属性；</p></li><li><p>如果 flex 子元素连 <code>width</code> 都未指定，那么去参考 <code>content(内容计算宽度)</code>。</p></li></ol><h4 id="第二步-考虑-min-和-max-的影响" tabindex="-1">第二步：考虑 <code>min-*</code> 和 <code>max-*</code> 的影响 <a class="header-anchor" href="#第二步-考虑-min-和-max-的影响" aria-hidden="true">#</a></h4><p>参考以下逻辑：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> size </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 尺寸初始值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (basis </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> min) size </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> min</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 最小值</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (basis </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> max) size </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> max</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 最大值</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (min </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> max) size </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> min</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 当大小冲突，min 的权重高于 max</span></span>
<span class="line"></span></code></pre></div><h3 id="关于-min-width-0-的意义" tabindex="-1">关于 <code>min-width: 0</code> 的意义 <a class="header-anchor" href="#关于-min-width-0-的意义" aria-hidden="true">#</a></h3><p><a href="#flex-1-flex-1-1-0">上文</a>设置 <code>flex-basis: 0</code> 后，初始化尺寸不为 0 的原因，在这里可以解释了。</p><p>W3C 中规定：</p><blockquote><p>主轴上 flex 子元素设置 <code>overflow: visible</code> 时，<strong>若 flex 子元素未设置最小尺寸 (min-size)，将会指定为一个自动的最小尺寸 (min-content)</strong>。</p></blockquote><p>这就导致 <code>flex-basis: 0</code> 被 <code>min-content</code> 覆盖。</p><p>因此，在需要<strong>子元素初始尺寸为 0 时，最好同时设置 <code>flex-basis: 0</code> 和 <code>min-width: 0</code></strong>。</p>`,71),n=[i];function t(c,r,d,p,h,f){return a(),l("div",null,n)}const u=e(o,[["render",t]]);export{b as __pageData,u as default};
