import{_ as e,c as t,o as i,d as p}from"./app.4b9a283d.js";const u=JSON.parse('{"title":"《跟Wakaba酱一起学Git使用》","description":"","frontmatter":{"title":"《跟Wakaba酱一起学Git使用》","icon":"git","isOriginal":true,"date":"2022-09-29T00:00:00.000Z","category":["读书笔记","技术"],"tag":["计算机基础","git"],"image":"","banner":""},"headers":[{"level":2,"title":"Git 的作用","slug":"git-的作用","link":"#git-的作用","children":[]},{"level":2,"title":"前期准备","slug":"前期准备","link":"#前期准备","children":[]},{"level":2,"title":"独自使用 Git","slug":"独自使用-git","link":"#独自使用-git","children":[{"level":3,"title":"第一步：创建一个仓库 (repository)","slug":"第一步-创建一个仓库-repository","link":"#第一步-创建一个仓库-repository","children":[]},{"level":3,"title":"第二步：提交","slug":"第二步-提交","link":"#第二步-提交","children":[]},{"level":3,"title":"使用 checkout 移动提交","slug":"使用-checkout-移动提交","link":"#使用-checkout-移动提交","children":[]},{"level":3,"title":"","slug":"","link":"#","children":[]}]}],"relativePath":"posts/tech/《跟Wakaba酱一起学Git使用》.md","lastUpdated":1678177559000}'),a={name:"posts/tech/《跟Wakaba酱一起学Git使用》.md"},r=p('<p>萌系码农漫画书也就图一乐，真要学习害得看文档。</p><h2 id="git-的作用" tabindex="-1">Git 的作用 <a class="header-anchor" href="#git-的作用" aria-hidden="true">#</a></h2><p>Git 是 <strong>版本管理系统</strong>。使用 Git，能够使工作更高效。</p><p>如果你不懂什么是 版本管理系统，可以看看它的主要作用：</p><ul><li><p>可以让文件回到过去的状态</p><p>比如一份文稿完成后，修改了若干个版本。如果这时候还是觉得之前的某个版本比较好，就可以便捷地切换，回到过去。无需改一版做一次备份。</p></li><li><p>对于同一个文件，可以多人协同修改</p><p>多人同时修改一份文稿，难免会有不一致的情况。使用 Git 可以尽可能避免人工校对，自动将两个人的修改合二为一。（当然合多为一也是可以的）</p></li><li><p>能记录文档修改的原因</p><p>可以记录每一次修改文稿的原因，这样可以追溯之前的所有修改，一目了然。</p></li></ul><h2 id="前期准备" tabindex="-1">前期准备 <a class="header-anchor" href="#前期准备" aria-hidden="true">#</a></h2><p>对于初学者可以不适用复杂的命令行，而使用 <code>SourceTree</code> 工具进行操作。</p><p>下载并安装 <code>SourceTree</code> 的过程略过，可以参考网上的各种教程。</p><h2 id="独自使用-git" tabindex="-1">独自使用 Git <a class="header-anchor" href="#独自使用-git" aria-hidden="true">#</a></h2><p>比起与人协作，先独自使用 Git 能更好地理解它。</p><h3 id="第一步-创建一个仓库-repository" tabindex="-1">第一步：创建一个仓库 (repository) <a class="header-anchor" href="#第一步-创建一个仓库-repository" aria-hidden="true">#</a></h3><p>仓库是存东西的，那 Git 里的仓库存的是什么呢？</p><p>你可以理解它为存储 <strong>过去状态</strong> 的仓库。相当于这个仓库保存了，你的文稿修改至今的各版本备份。</p><p>Git 的仓库一般建立在你电脑的某个文件夹下面（即某个目录下面），这样它就能去记录该文件夹下，所有txt、图片、Word……等文件的历史版本。也能在你需要的时候，找回任何一个历史版本。</p><p>这个记录和找回的动作，就称为 <strong>管理</strong>。现在你是不是更理解什么叫 <strong>版本管理</strong> 了？</p><p>当你建立好仓库后，你在那个目录下可以找到一个名叫 <code>.git</code> 的隐藏文件夹。（如果看不到，需要电脑设置“显示隐藏的文件夹”）</p><p>这就说明当前文件夹内有一个仓库。</p><h3 id="第二步-提交" tabindex="-1">第二步：提交 <a class="header-anchor" href="#第二步-提交" aria-hidden="true">#</a></h3><p>仓库建立好了，现在学习如何提交一个版本。</p><p>何谓 <strong>提交</strong>？之前说过 Git 可以记录文稿的版本，但它并不是全自动的，需要你去告诉 Git：你应该备份一下当前的状态。</p><p>这个提交，就是命令 Git 去备份文件。</p><p>那么怎样才能完成一次提交呢？我们引用书中的例子：</p><p>如果我们要做一道日式什锦烧，这道菜需要我们依次加入 鸡蛋&amp;水&amp;什锦粉、卷心菜、肉。</p><p>我们放入 鸡蛋&amp;水&amp;什锦粉，把碗放到摄影台上，拍照。</p><p>然后放入 卷心菜，把碗放到摄影台上，拍照。</p><p>最后放入 可乐，把碗放到摄影台上，拍照。</p><p>？？？</p><p>等等，为什么是可乐？</p><p>不要慌，这时候 Git 的优势就体现出来了。我们可以退回到之前的某个版本，实现“时光倒流”。</p><p>每一步我们都把碗放上摄影台，然后拍照。这实际上是比喻了文稿的上传过程。</p><ol><li><p>修改文稿 （往碗中放入食材）</p></li><li><p>暂存 （把碗放到摄影台上）</p></li><li><p>提交 （拍摄照片）</p></li></ol><p>暂存相当于去确认一下你修改的部分，以及哪些部分需要存为备份。</p><p>当你暂存（确定）了需要备份的文件，提交就为它生产了一条历史记录（照片）。</p><h3 id="使用-checkout-移动提交" tabindex="-1">使用 checkout 移动提交 <a class="header-anchor" href="#使用-checkout-移动提交" aria-hidden="true">#</a></h3><p>完成了对什锦烧的版本管理，但现在你的碗里仍然是黑暗料理。（字面意思的黑暗，因为加了可乐）</p><p>那么要怎么回到没加可乐的版本呢？</p><p>我们使用 checkout 移动到过去的提交。</p><p>现在什锦烧记录了三个提交，如下所示：</p><p>提交3：加入 可乐 （目前） ↑ 提交2：加入 卷心菜 ↑ 提交1：加入 鸡蛋&amp;水&amp;什锦粉</p><p>我们就可以 <code>checkout 2</code>，将目前状态，退回到加入卷心菜的时候。</p><p>当然你也可以再 <code>checkout 3</code>，回到加了可乐的状态。</p><p>至此我们就学会了 Git 独自使用时如何进行版本管理。</p><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h3>',43),o=[r];function l(c,d,n,h,s,_){return i(),t("div",null,o)}const k=e(a,[["render",l]]);export{u as __pageData,k as default};
